// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class ADBSettings {
    /**
     * Creates a new ADBSettings instance.
     * @param {Partial<ADBSettings>} [$$source = {}] - The source object to create the ADBSettings.
     */
    constructor($$source = {}) {
        if (!("Host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Host"] = "";
        }
        if (!("Port" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Port"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ADBSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ADBSettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ADBSettings(/** @type {Partial<ADBSettings>} */($$parsedSource));
    }
}

export class DeviceSettings {
    /**
     * Creates a new DeviceSettings instance.
     * @param {Partial<DeviceSettings>} [$$source = {}] - The source object to create the DeviceSettings.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ID"] = "";
        }
        if (!("Resize Display (Phone/Tablet only)" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Resize Display (Phone/Tablet only)"] = false;
        }
        if (!("Device Streaming (disable for slow PCs)" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Device Streaming (disable for slow PCs)"] = false;
        }
        if (!("Enable Hardware Decoding" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Enable Hardware Decoding"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DeviceSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DeviceSettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DeviceSettings(/** @type {Partial<DeviceSettings>} */($$parsedSource));
    }
}

export class GeneralSettings {
    /**
     * Creates a new GeneralSettings instance.
     * @param {Partial<GeneralSettings>} [$$source = {}] - The source object to create the GeneralSettings.
     */
    constructor($$source = {}) {
        if (!("ADB (Advanced)" in $$source)) {
            /**
             * @member
             * @type {ADBSettings}
             */
            this["ADB (Advanced)"] = (new ADBSettings());
        }
        if (!("Device" in $$source)) {
            /**
             * @member
             * @type {DeviceSettings}
             */
            this["Device"] = (new DeviceSettings());
        }
        if (!("Update" in $$source)) {
            /**
             * @member
             * @type {UpdateSettings}
             */
            this["Update"] = (new UpdateSettings());
        }
        if (!("Logging" in $$source)) {
            /**
             * @member
             * @type {LoggingSettings}
             */
            this["Logging"] = (new LoggingSettings());
        }
        if (!("User Interface" in $$source)) {
            /**
             * @member
             * @type {UISettings}
             */
            this["User Interface"] = (new UISettings());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GeneralSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {GeneralSettings}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType1;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType3;
        const $$createField4_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("ADB (Advanced)" in $$parsedSource) {
            $$parsedSource["ADB (Advanced)"] = $$createField0_0($$parsedSource["ADB (Advanced)"]);
        }
        if ("Device" in $$parsedSource) {
            $$parsedSource["Device"] = $$createField1_0($$parsedSource["Device"]);
        }
        if ("Update" in $$parsedSource) {
            $$parsedSource["Update"] = $$createField2_0($$parsedSource["Update"]);
        }
        if ("Logging" in $$parsedSource) {
            $$parsedSource["Logging"] = $$createField3_0($$parsedSource["Logging"]);
        }
        if ("User Interface" in $$parsedSource) {
            $$parsedSource["User Interface"] = $$createField4_0($$parsedSource["User Interface"]);
        }
        return new GeneralSettings(/** @type {Partial<GeneralSettings>} */($$parsedSource));
    }
}

export class LoggingSettings {
    /**
     * Creates a new LoggingSettings instance.
     * @param {Partial<LoggingSettings>} [$$source = {}] - The source object to create the LoggingSettings.
     */
    constructor($$source = {}) {
        if (!("Level" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Level"] = "";
        }
        if (!("Debug Screenshot Limit" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Debug Screenshot Limit"] = 0;
        }
        if (!("Action Log Limit" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Action Log Limit"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LoggingSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {LoggingSettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new LoggingSettings(/** @type {Partial<LoggingSettings>} */($$parsedSource));
    }
}

export class UISettings {
    /**
     * Creates a new UISettings instance.
     * @param {Partial<UISettings>} [$$source = {}] - The source object to create the UISettings.
     */
    constructor($$source = {}) {
        if (!("Theme" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Theme"] = "";
        }
        if (!("Language" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Language"] = "";
        }
        if (!("Close button should minimize the window" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Close button should minimize the window"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UISettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UISettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UISettings(/** @type {Partial<UISettings>} */($$parsedSource));
    }
}

export class UpdateSettings {
    /**
     * Creates a new UpdateSettings instance.
     * @param {Partial<UpdateSettings>} [$$source = {}] - The source object to create the UpdateSettings.
     */
    constructor($$source = {}) {
        if (!("Automatically download updates" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Automatically download updates"] = false;
        }
        if (!("Download Alpha updates" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Download Alpha updates"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UpdateSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UpdateSettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UpdateSettings(/** @type {Partial<UpdateSettings>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = ADBSettings.createFrom;
const $$createType1 = DeviceSettings.createFrom;
const $$createType2 = UpdateSettings.createFrom;
const $$createType3 = LoggingSettings.createFrom;
const $$createType4 = UISettings.createFrom;

// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class GameGUI {
    /**
     * Creates a new GameGUI instance.
     * @param {Partial<GameGUI>} [$$source = {}] - The source object to create the GameGUI.
     */
    constructor($$source = {}) {
        if (!("game_title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["game_title"] = "";
        }
        if (!("config_path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["config_path"] = "";
        }
        if (!("menu_options" in $$source)) {
            /**
             * @member
             * @type {MenuOption[]}
             */
            this["menu_options"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["categories"] = undefined;
        }
        if (!("constraints" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: any }}
             */
            this["constraints"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GameGUI instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {GameGUI}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType1;
        const $$createField3_0 = $$createType2;
        const $$createField4_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("menu_options" in $$parsedSource) {
            $$parsedSource["menu_options"] = $$createField2_0($$parsedSource["menu_options"]);
        }
        if ("categories" in $$parsedSource) {
            $$parsedSource["categories"] = $$createField3_0($$parsedSource["categories"]);
        }
        if ("constraints" in $$parsedSource) {
            $$parsedSource["constraints"] = $$createField4_0($$parsedSource["constraints"]);
        }
        return new GameGUI(/** @type {Partial<GameGUI>} */($$parsedSource));
    }
}

export class MenuOption {
    /**
     * Creates a new MenuOption instance.
     * @param {Partial<MenuOption>} [$$source = {}] - The source object to create the MenuOption.
     */
    constructor($$source = {}) {
        if (!("label" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["label"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["translated"] = undefined;
        }
        if (!("args" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["args"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["category"] = undefined;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["tooltip"] = undefined;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MenuOption instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {MenuOption}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("args" in $$parsedSource) {
            $$parsedSource["args"] = $$createField2_0($$parsedSource["args"]);
        }
        return new MenuOption(/** @type {Partial<MenuOption>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = MenuOption.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $Create.Map($Create.Any, $Create.Any);

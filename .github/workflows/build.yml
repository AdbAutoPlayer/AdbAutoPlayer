name: Build

on:
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            zip_files: "AdbAutoPlayer_Windows.zip,Patch_Windows.zip"
            build_script: ".github/scripts/build_zip.ps1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: npm version tag_name
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: frontend
        run: npm version "${{ github.event.release.tag_name }}"

      - name: npm install
        working-directory: frontend
        run: npm install

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: python -m pip install uv

      - name: update pyproject.toml version
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: python
        run: uvx --from=toml-cli toml set --toml-path=pyproject.toml project.version "${{ github.event.release.tag_name }}"

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: build zip windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: .github/scripts/build_zip.ps1

      - uses: softprops/action-gh-release@v2
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          files: ${{ matrix.zip_files }}

      - uses: actions/upload-artifact@v4
        if: github.event_name == 'workflow_dispatch' && matrix.os == 'windows-latest'
        with:
          if-no-files-found: 'error'
          name: ${{ matrix.os }}-build
          path: "*_Windows.zip"

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4

      - name: Mark release as latest
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method PATCH \
            "/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            -f make_latest=true

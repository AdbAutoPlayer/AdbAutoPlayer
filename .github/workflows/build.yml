name: Build

on:
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  UV_LINK_MODE: 'copy'
  NUITKA_CACHE_DIR: ${{ github.workspace }}/.nuitka-cache

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: nuitka-${{ runner.os }}-${{ runner.arch }}-files-${{ hashFiles('python/adb_auto_player/**/*.py', 'python/pyproject.toml', 'python/uv.lock') }}
          restore-keys: |
            nuitka-${{ runner.os }}-${{ runner.arch }}-

      - name: Setup Go, Wails, Node, uv, Python
        uses: ./.github/actions/setup-tools

      - name: npm version
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: frontend
        run: npm version "${{ github.event.release.tag_name }}"

      - name: uv version
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: python
        run: uv version ${{ github.event.release.tag_name }}

      - name: Build with version (release)
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: .github/scripts/build_windows.ps1 -Version "${{ github.event.release.tag_name }}"

      - name: Build without version (manual)
        if: github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: .github/scripts/build_windows.ps1

      - name: Zip output
        shell: pwsh
        run: .github/scripts/zip_windows.ps1

      - name: Release Windows artifact
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: AdbAutoPlayer_Windows.zip

      - name: Upload Windows artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: 'error'
          name: AdbAutoPlayer_Windows
          path: AdbAutoPlayer/[!.]*

  build-macos:
    name: Build macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: nuitka-${{ runner.os }}-${{ runner.arch }}-files-${{ hashFiles('python/adb_auto_player/**/*.py', 'python/pyproject.toml', 'python/uv.lock') }}
          restore-keys: |
            nuitka-${{ runner.os }}-${{ runner.arch }}-

      - name: Setup Go, Wails, Node, uv, Python
        uses: ./.github/actions/setup-tools

      - name: npm version
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: frontend
        run: npm version "${{ github.event.release.tag_name }}"

      - name: uv version
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: python
        run: uv version ${{ github.event.release.tag_name }}

      - name: Make build_macos.sh executable
        run: chmod +x .github/scripts/build_macos.sh

      - name: Build with version (release)
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: bash
        run: VERSION="${{ github.event.release.tag_name }}" .github/scripts/build_macos.sh

      - name: Build without version (manual)
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: .github/scripts/build_macos.sh

      - name: Zip macOS artifact
        if: github.event_name == 'workflow_dispatch'
        run: |
          zip -r AdbAutoPlayer_MacOS.zip AdbAutoPlayer.app
          zip -j AdbAutoPlayer_MacOS.zip .github/scripts/MACOS_READ_THIS_IMPORTANT.txt
        shell: bash

      - name: Release macOS artifact
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: AdbAutoPlayer_MacOS.zip

      - name: Upload macOS artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: 'error'
          name: AdbAutoPlayer_MacOS
          path: AdbAutoPlayer_MacOS.zip

  publish:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.tag_name, 'alpha')

    steps:
      - uses: actions/checkout@v4

      - name: Mark release as latest
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method PATCH \
            "/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            -f make_latest=true
